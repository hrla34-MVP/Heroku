let cors,bodyParser,express,mongoose,ApolloServer,schema,resolvers;_df7‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_df7‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_df7‍.w("express",[["default",["express"],function(v){express=v}]]);_df7‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_df7‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_df7‍.w("./gqlschema/index",[["default",["schema"],function(v){schema=v}]]);_df7‍.w("./resolvers/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);require('dotenv').config()




mongoose.Promise = global.Promise;




const app = express();

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded( {extended: true}));

const server = new ApolloServer({
    typeDefs: schema,
    resolvers,
});

server.applyMiddleware({
    app,
    path: '/graphql'
});
const url = process.env.MONGODB_URI || 'mongodb://localhost:27017/graphql';
mongoose.connect(url);

app.listen({
    port: process.env.port || 8000
}, () => {
    console.log('Apollo Server on http://localhost:8000/graphql');
});